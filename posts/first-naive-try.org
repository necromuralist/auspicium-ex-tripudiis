#+BEGIN_COMMENT
.. title: First Naive Try
.. slug: first-naive-try
.. date: 2018-08-11 19:37:37 UTC-07:00
.. tags: naive model competition
.. category: competition
.. link: 
.. description: A first naive model.
.. type: text
#+END_COMMENT
#+OPTIONS: ^:{}
#+TOC: headlines 1
* Introduction
  Our goal is to predict the number of sales for each shop for November 2015 (based on the prior months). I'm going to make some very naive guesses here with some models that only use the prior dates and the target counts.
* Imports
** Python Standard Library
#+BEGIN_SRC ipython :session naive :results none
# python standard library
import warnings
import os
import pickle
#+END_SRC

** Supress the Warnings
#+BEGIN_SRC ipython :session naive :results none
warnings.filterwarnings("ignore", message="numpy.dtype size changed")
warnings.filterwarnings("ignore", message="numpy.ufunc size changed")
#+END_SRC

** From pypi

#+BEGIN_SRC ipython :session naive :results none
import numpy
import pandas
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import RandomTreesRegressor
from tabulate import tabulate
#+END_SRC

** This Project
#+BEGIN_SRC ipython :session naive :results none
# this project
from helpers.helpers import (
    Helpers,
    DataSource,
    DataKeys,
    Pickles,
    )
#+End_SRC
* Loading the Data

#+BEGIN_SRC ipython :session naive :results none
x_train = Helpers.unpickle(Pickles.x_train)
x_test = Helpers.unpickle(Pickles.x_test)
y_train = Helpers.unpickle(Pickles.y_train)
y_test = Helpers.unpickle(Pickles.y_test)
#+END_SRC

To make it easier to filter I'm going to combine the x and y data.

#+BEGIN_SRC ipython :session naive :results none
DataKeys.target = "Month Count"
x_train[DataKeys.target] = y_train.values
x_test[DataKeys.target] = y_test.values
#+END_SRC

#+BEGIN_SRC ipython :session naive :results output raw :exports both
Helpers.print_head(x_train)
#+END_SRC

#+RESULTS:
| date_block_num | shop_id | item_id | item_price | item_category_id | month | year | Month Count |
|----------------+---------+---------+------------+------------------+-------+------+-------------|
|             11 |      15 |    1324 |        499 |               55 |    12 | 2013 |           1 |
|             18 |      31 |   19981 |        499 |               43 |    07 | 2014 |           2 |
|             32 |      28 |    7934 |        398 |                7 |    09 | 2015 |           1 |
|             12 |      43 |   13518 |       1499 |               19 |    01 | 2014 |           1 |
|             28 |      25 |   19927 |        329 |               57 |    05 | 2015 |           2 |
* November Only
What happens if we only use the month of November in the data?

#+BEGIN_SRC ipython :session naive :results none
training = x_train[x_train.month == "11"]
#+END_SRC

#+BEGIN_SRC ipython :session naive :results output raw :exports both

#+END_SRC
* The Linear Model
  What happens if we just use the default linear regression model? The first problem we have is that we have both non-numeric data and categorical data. I think removing the =item_name= variable seems reasonable at this point, since we have unique =item_id= values for each item, although it's possible that some text-mining might reveal something in the names, because this is just a naive approach that will use linear regression.

#+BEGIN_SRC ipython :session naive :results none
del(x_train[DataKeys.name])
#+END_SRC

#+BEGIN_SRC ipython :session naive :results none
regression = linear_model.LinearRegression()
regression.fit(x_train, y_train)
#+END_SRC
